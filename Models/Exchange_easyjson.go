// Code generated by easyjson for marshaling/unmarshaling. DO NOT EDIT.

package models

import (
	json "encoding/json"
	easyjson "github.com/mailru/easyjson"
	jlexer "github.com/mailru/easyjson/jlexer"
	jwriter "github.com/mailru/easyjson/jwriter"
)

// suppress unused package warning
var (
	_ *json.RawMessage
	_ *jlexer.Lexer
	_ *jwriter.Writer
	_ easyjson.Marshaler
)

func easyjson7f73fe77DecodeGithubComDEEBBLUEModelsModels(in *jlexer.Lexer, out *ExchangeType) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "type":
			out.Type = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7f73fe77EncodeGithubComDEEBBLUEModelsModels(out *jwriter.Writer, in ExchangeType) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"type\":"
		out.RawString(prefix[1:])
		out.String(string(in.Type))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ExchangeType) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7f73fe77EncodeGithubComDEEBBLUEModelsModels(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ExchangeType) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7f73fe77EncodeGithubComDEEBBLUEModelsModels(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ExchangeType) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7f73fe77DecodeGithubComDEEBBLUEModelsModels(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ExchangeType) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7f73fe77DecodeGithubComDEEBBLUEModelsModels(l, v)
}
func easyjson7f73fe77DecodeGithubComDEEBBLUEModelsModels1(in *jlexer.Lexer, out *ExchangeStatus) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "status":
			out.Status = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7f73fe77EncodeGithubComDEEBBLUEModelsModels1(out *jwriter.Writer, in ExchangeStatus) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"status\":"
		out.RawString(prefix[1:])
		out.String(string(in.Status))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ExchangeStatus) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7f73fe77EncodeGithubComDEEBBLUEModelsModels1(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ExchangeStatus) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7f73fe77EncodeGithubComDEEBBLUEModelsModels1(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ExchangeStatus) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7f73fe77DecodeGithubComDEEBBLUEModelsModels1(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ExchangeStatus) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7f73fe77DecodeGithubComDEEBBLUEModelsModels1(l, v)
}
func easyjson7f73fe77DecodeGithubComDEEBBLUEModelsModels2(in *jlexer.Lexer, out *ExchangeData) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "amount":
			out.Amount = float32(in.Float32())
		case "details":
			out.Details = string(in.String())
		case "exchnage_currency":
			(out.Currency).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7f73fe77EncodeGithubComDEEBBLUEModelsModels2(out *jwriter.Writer, in ExchangeData) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"amount\":"
		out.RawString(prefix[1:])
		out.Float32(float32(in.Amount))
	}
	{
		const prefix string = ",\"details\":"
		out.RawString(prefix)
		out.String(string(in.Details))
	}
	{
		const prefix string = ",\"exchnage_currency\":"
		out.RawString(prefix)
		(in.Currency).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ExchangeData) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7f73fe77EncodeGithubComDEEBBLUEModelsModels2(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ExchangeData) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7f73fe77EncodeGithubComDEEBBLUEModelsModels2(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ExchangeData) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7f73fe77DecodeGithubComDEEBBLUEModelsModels2(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ExchangeData) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7f73fe77DecodeGithubComDEEBBLUEModelsModels2(l, v)
}
func easyjson7f73fe77DecodeGithubComDEEBBLUEModelsModels3(in *jlexer.Lexer, out *ExchangeCurrency) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "curryncy":
			out.Currency = string(in.String())
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7f73fe77EncodeGithubComDEEBBLUEModelsModels3(out *jwriter.Writer, in ExchangeCurrency) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"curryncy\":"
		out.RawString(prefix[1:])
		out.String(string(in.Currency))
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v ExchangeCurrency) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7f73fe77EncodeGithubComDEEBBLUEModelsModels3(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v ExchangeCurrency) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7f73fe77EncodeGithubComDEEBBLUEModelsModels3(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *ExchangeCurrency) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7f73fe77DecodeGithubComDEEBBLUEModelsModels3(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *ExchangeCurrency) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7f73fe77DecodeGithubComDEEBBLUEModelsModels3(l, v)
}
func easyjson7f73fe77DecodeGithubComDEEBBLUEModelsModels4(in *jlexer.Lexer, out *Exchange) {
	isTopLevel := in.IsStart()
	if in.IsNull() {
		if isTopLevel {
			in.Consumed()
		}
		in.Skip()
		return
	}
	in.Delim('{')
	for !in.IsDelim('}') {
		key := in.UnsafeFieldName(false)
		in.WantColon()
		if in.IsNull() {
			in.Skip()
			in.WantComma()
			continue
		}
		switch key {
		case "exchange_id":
			out.ExchangeId = int(in.Int())
		case "client_id":
			out.ClientId = int(in.Int())
		case "oper_id":
			out.OperId = int(in.Int())
		case "time_start":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.TimeStart).UnmarshalJSON(data))
			}
		case "time_end":
			if data := in.Raw(); in.Ok() {
				in.AddError((out.TimeEnd).UnmarshalJSON(data))
			}
		case "rate":
			out.Rate = float32(in.Float32())
		case "data_in":
			(out.DataIn).UnmarshalEasyJSON(in)
		case "data_out":
			(out.DataOut).UnmarshalEasyJSON(in)
		case "exchnage_status":
			(out.Status).UnmarshalEasyJSON(in)
		case "exchange_type":
			(out.Type).UnmarshalEasyJSON(in)
		default:
			in.SkipRecursive()
		}
		in.WantComma()
	}
	in.Delim('}')
	if isTopLevel {
		in.Consumed()
	}
}
func easyjson7f73fe77EncodeGithubComDEEBBLUEModelsModels4(out *jwriter.Writer, in Exchange) {
	out.RawByte('{')
	first := true
	_ = first
	{
		const prefix string = ",\"exchange_id\":"
		out.RawString(prefix[1:])
		out.Int(int(in.ExchangeId))
	}
	{
		const prefix string = ",\"client_id\":"
		out.RawString(prefix)
		out.Int(int(in.ClientId))
	}
	{
		const prefix string = ",\"oper_id\":"
		out.RawString(prefix)
		out.Int(int(in.OperId))
	}
	{
		const prefix string = ",\"time_start\":"
		out.RawString(prefix)
		out.Raw((in.TimeStart).MarshalJSON())
	}
	{
		const prefix string = ",\"time_end\":"
		out.RawString(prefix)
		out.Raw((in.TimeEnd).MarshalJSON())
	}
	{
		const prefix string = ",\"rate\":"
		out.RawString(prefix)
		out.Float32(float32(in.Rate))
	}
	{
		const prefix string = ",\"data_in\":"
		out.RawString(prefix)
		(in.DataIn).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"data_out\":"
		out.RawString(prefix)
		(in.DataOut).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"exchnage_status\":"
		out.RawString(prefix)
		(in.Status).MarshalEasyJSON(out)
	}
	{
		const prefix string = ",\"exchange_type\":"
		out.RawString(prefix)
		(in.Type).MarshalEasyJSON(out)
	}
	out.RawByte('}')
}

// MarshalJSON supports json.Marshaler interface
func (v Exchange) MarshalJSON() ([]byte, error) {
	w := jwriter.Writer{}
	easyjson7f73fe77EncodeGithubComDEEBBLUEModelsModels4(&w, v)
	return w.Buffer.BuildBytes(), w.Error
}

// MarshalEasyJSON supports easyjson.Marshaler interface
func (v Exchange) MarshalEasyJSON(w *jwriter.Writer) {
	easyjson7f73fe77EncodeGithubComDEEBBLUEModelsModels4(w, v)
}

// UnmarshalJSON supports json.Unmarshaler interface
func (v *Exchange) UnmarshalJSON(data []byte) error {
	r := jlexer.Lexer{Data: data}
	easyjson7f73fe77DecodeGithubComDEEBBLUEModelsModels4(&r, v)
	return r.Error()
}

// UnmarshalEasyJSON supports easyjson.Unmarshaler interface
func (v *Exchange) UnmarshalEasyJSON(l *jlexer.Lexer) {
	easyjson7f73fe77DecodeGithubComDEEBBLUEModelsModels4(l, v)
}
